//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AutomatedMonitoringSystem.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AMSDBEntities : DbContext
    {
        public AMSDBEntities()
            : base("name=AMSDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Class> Classes { get; set; }
        public virtual DbSet<Image> Images { get; set; }
        public virtual DbSet<Notice> Notices { get; set; }
        public virtual DbSet<Period> Periods { get; set; }
        public virtual DbSet<RelationStudentGuardian> RelationStudentGuardians { get; set; }
        public virtual DbSet<Section> Sections { get; set; }
        public virtual DbSet<StudentBasic> StudentBasics { get; set; }
        public virtual DbSet<StudentInfo> StudentInfoes { get; set; }
        public virtual DbSet<Subject> Subjects { get; set; }
        public virtual DbSet<TeacherSubject> TeacherSubjects { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserType> UserTypes { get; set; }
        public virtual DbSet<Attendance> Attendances { get; set; }
        public virtual DbSet<EaxmResult> EaxmResults { get; set; }
        public virtual DbSet<ExamType> ExamTypes { get; set; }
        public virtual DbSet<Message> Messages { get; set; }
        public virtual DbSet<Payment> Payments { get; set; }
        public virtual DbSet<RelationPeriodDayTime> RelationPeriodDayTimes { get; set; }
        public virtual DbSet<vm_GetAllStudentInfo> vm_GetAllStudentInfo { get; set; }
        public virtual DbSet<vm_GetClassInfoAlongWithSubjects> vm_GetClassInfoAlongWithSubjects { get; set; }
        public virtual DbSet<vm_GetAllStudentInfo2> vm_GetAllStudentInfo2 { get; set; }
        public virtual DbSet<vm_GetAllClassInfoAlongWithSubjects> vm_GetAllClassInfoAlongWithSubjects { get; set; }
        public virtual DbSet<vm_GetAllClassInfoAlongWithSubjectsWithTeacher> vm_GetAllClassInfoAlongWithSubjectsWithTeacher { get; set; }
        public virtual DbSet<vm_NoticeDetails> vm_NoticeDetails { get; set; }
        public virtual DbSet<vm_GetPeriodInfo> vm_GetPeriodInfo { get; set; }
        public virtual DbSet<vm_GetPeriodInfoWithTime> vm_GetPeriodInfoWithTime { get; set; }
        public virtual DbSet<vw_PeriodDetails> vw_PeriodDetails { get; set; }
        public virtual DbSet<vw_PeriodDetailsWithTeacherInfo> vw_PeriodDetailsWithTeacherInfo { get; set; }
    
        public virtual int AddNotice_SP(Nullable<long> noticeId, Nullable<long> postedBy, Nullable<int> maskingId, string message, string title, Nullable<System.DateTime> postedDate, Nullable<System.DateTime> updatedDate, Nullable<System.DateTime> postedForTime, ObjectParameter mSG_Code, ObjectParameter mSG)
        {
            var noticeIdParameter = noticeId.HasValue ?
                new ObjectParameter("NoticeId", noticeId) :
                new ObjectParameter("NoticeId", typeof(long));
    
            var postedByParameter = postedBy.HasValue ?
                new ObjectParameter("PostedBy", postedBy) :
                new ObjectParameter("PostedBy", typeof(long));
    
            var maskingIdParameter = maskingId.HasValue ?
                new ObjectParameter("MaskingId", maskingId) :
                new ObjectParameter("MaskingId", typeof(int));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var postedDateParameter = postedDate.HasValue ?
                new ObjectParameter("PostedDate", postedDate) :
                new ObjectParameter("PostedDate", typeof(System.DateTime));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var postedForTimeParameter = postedForTime.HasValue ?
                new ObjectParameter("PostedForTime", postedForTime) :
                new ObjectParameter("PostedForTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddNotice_SP", noticeIdParameter, postedByParameter, maskingIdParameter, messageParameter, titleParameter, postedDateParameter, updatedDateParameter, postedForTimeParameter, mSG_Code, mSG);
        }
    
        public virtual ObjectResult<GetAttedanceByClass_SP_Result> GetAttedanceByClass_SP(Nullable<System.DateTime> date, Nullable<int> classId, Nullable<int> sectionId)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            var sectionIdParameter = sectionId.HasValue ?
                new ObjectParameter("SectionId", sectionId) :
                new ObjectParameter("SectionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAttedanceByClass_SP_Result>("GetAttedanceByClass_SP", dateParameter, classIdParameter, sectionIdParameter);
        }
    
        public virtual ObjectResult<GetAttedanceByStudentRoll_SP_Result> GetAttedanceByStudentRoll_SP(Nullable<int> roll, Nullable<System.DateTime> date, Nullable<int> classId, Nullable<int> sectionId)
        {
            var rollParameter = roll.HasValue ?
                new ObjectParameter("Roll", roll) :
                new ObjectParameter("Roll", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            var sectionIdParameter = sectionId.HasValue ?
                new ObjectParameter("SectionId", sectionId) :
                new ObjectParameter("SectionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAttedanceByStudentRoll_SP_Result>("GetAttedanceByStudentRoll_SP", rollParameter, dateParameter, classIdParameter, sectionIdParameter);
        }
    
        public virtual ObjectResult<sp_AddStudentInfo_Result> sp_AddStudentInfo(Nullable<long> studentId, string name, Nullable<System.DateTime> birthday, string fatherName, string motherName, string presentAddress, string permanentAddress, string contact1, string contact2, Nullable<int> roll, Nullable<int> year, string shift, Nullable<long> classId, Nullable<int> sectionId, string residential)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var birthdayParameter = birthday.HasValue ?
                new ObjectParameter("Birthday", birthday) :
                new ObjectParameter("Birthday", typeof(System.DateTime));
    
            var fatherNameParameter = fatherName != null ?
                new ObjectParameter("FatherName", fatherName) :
                new ObjectParameter("FatherName", typeof(string));
    
            var motherNameParameter = motherName != null ?
                new ObjectParameter("MotherName", motherName) :
                new ObjectParameter("MotherName", typeof(string));
    
            var presentAddressParameter = presentAddress != null ?
                new ObjectParameter("PresentAddress", presentAddress) :
                new ObjectParameter("PresentAddress", typeof(string));
    
            var permanentAddressParameter = permanentAddress != null ?
                new ObjectParameter("PermanentAddress", permanentAddress) :
                new ObjectParameter("PermanentAddress", typeof(string));
    
            var contact1Parameter = contact1 != null ?
                new ObjectParameter("Contact1", contact1) :
                new ObjectParameter("Contact1", typeof(string));
    
            var contact2Parameter = contact2 != null ?
                new ObjectParameter("Contact2", contact2) :
                new ObjectParameter("Contact2", typeof(string));
    
            var rollParameter = roll.HasValue ?
                new ObjectParameter("Roll", roll) :
                new ObjectParameter("Roll", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var shiftParameter = shift != null ?
                new ObjectParameter("Shift", shift) :
                new ObjectParameter("Shift", typeof(string));
    
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(long));
    
            var sectionIdParameter = sectionId.HasValue ?
                new ObjectParameter("SectionId", sectionId) :
                new ObjectParameter("SectionId", typeof(int));
    
            var residentialParameter = residential != null ?
                new ObjectParameter("Residential", residential) :
                new ObjectParameter("Residential", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AddStudentInfo_Result>("sp_AddStudentInfo", studentIdParameter, nameParameter, birthdayParameter, fatherNameParameter, motherNameParameter, presentAddressParameter, permanentAddressParameter, contact1Parameter, contact2Parameter, rollParameter, yearParameter, shiftParameter, classIdParameter, sectionIdParameter, residentialParameter);
        }
    
        public virtual ObjectResult<GetStudentsInfoListByName_SP_Result> GetStudentsInfoListByName_SP(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStudentsInfoListByName_SP_Result>("GetStudentsInfoListByName_SP", nameParameter);
        }
    
        public virtual int AddOrUpdateSubjectTeacherAssignment_SP(Nullable<int> maskingSubjectId, Nullable<long> userId, ObjectParameter mSG_Code, ObjectParameter mSG)
        {
            var maskingSubjectIdParameter = maskingSubjectId.HasValue ?
                new ObjectParameter("MaskingSubjectId", maskingSubjectId) :
                new ObjectParameter("MaskingSubjectId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddOrUpdateSubjectTeacherAssignment_SP", maskingSubjectIdParameter, userIdParameter, mSG_Code, mSG);
        }
    
        public virtual ObjectResult<GetStudentInfo_SP_Result> GetStudentInfo_SP(Nullable<int> classId, Nullable<int> sectionId)
        {
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            var sectionIdParameter = sectionId.HasValue ?
                new ObjectParameter("SectionId", sectionId) :
                new ObjectParameter("SectionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStudentInfo_SP_Result>("GetStudentInfo_SP", classIdParameter, sectionIdParameter);
        }
    
        public virtual ObjectResult<GetNoticeDetails_SP_Result> GetNoticeDetails_SP()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetNoticeDetails_SP_Result>("GetNoticeDetails_SP");
        }
    
        public virtual ObjectResult<GetWeeklyRoutinebyClassSectionShiftDay_SP_Result> GetWeeklyRoutinebyClassSectionShiftDay_SP(Nullable<int> classId, Nullable<int> sectionId, string shift)
        {
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            var sectionIdParameter = sectionId.HasValue ?
                new ObjectParameter("SectionId", sectionId) :
                new ObjectParameter("SectionId", typeof(int));
    
            var shiftParameter = shift != null ?
                new ObjectParameter("Shift", shift) :
                new ObjectParameter("Shift", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWeeklyRoutinebyClassSectionShiftDay_SP_Result>("GetWeeklyRoutinebyClassSectionShiftDay_SP", classIdParameter, sectionIdParameter, shiftParameter);
        }
    
        public virtual ObjectResult<GetTeacherInfoByMuskingId_Result> GetTeacherInfoByMuskingId(Nullable<int> maskingSubjectId)
        {
            var maskingSubjectIdParameter = maskingSubjectId.HasValue ?
                new ObjectParameter("MaskingSubjectId", maskingSubjectId) :
                new ObjectParameter("MaskingSubjectId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTeacherInfoByMuskingId_Result>("GetTeacherInfoByMuskingId", maskingSubjectIdParameter);
        }
    
        public virtual ObjectResult<GetRoutineByClassSectionShift_SP_Result> GetRoutineByClassSectionShift_SP(Nullable<int> classId, Nullable<int> sectionId, string shift)
        {
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            var sectionIdParameter = sectionId.HasValue ?
                new ObjectParameter("SectionId", sectionId) :
                new ObjectParameter("SectionId", typeof(int));
    
            var shiftParameter = shift != null ?
                new ObjectParameter("Shift", shift) :
                new ObjectParameter("Shift", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRoutineByClassSectionShift_SP_Result>("GetRoutineByClassSectionShift_SP", classIdParameter, sectionIdParameter, shiftParameter);
        }
    
        public virtual int AddOrUpdateRoutineAssignment_SP(Nullable<int> maskingSubjectId, Nullable<long> periodId, ObjectParameter mSG_Code, ObjectParameter mSG)
        {
            var maskingSubjectIdParameter = maskingSubjectId.HasValue ?
                new ObjectParameter("MaskingSubjectId", maskingSubjectId) :
                new ObjectParameter("MaskingSubjectId", typeof(int));
    
            var periodIdParameter = periodId.HasValue ?
                new ObjectParameter("PeriodId", periodId) :
                new ObjectParameter("PeriodId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddOrUpdateRoutineAssignment_SP", maskingSubjectIdParameter, periodIdParameter, mSG_Code, mSG);
        }
    
        public virtual ObjectResult<GetPeriodsByClassSectionShift_SP_Result> GetPeriodsByClassSectionShift_SP(Nullable<int> classId, Nullable<int> sectionId, string shift)
        {
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            var sectionIdParameter = sectionId.HasValue ?
                new ObjectParameter("SectionId", sectionId) :
                new ObjectParameter("SectionId", typeof(int));
    
            var shiftParameter = shift != null ?
                new ObjectParameter("Shift", shift) :
                new ObjectParameter("Shift", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPeriodsByClassSectionShift_SP_Result>("GetPeriodsByClassSectionShift_SP", classIdParameter, sectionIdParameter, shiftParameter);
        }
    
        public virtual ObjectResult<GetExamResultDetails_SP_Result> GetExamResultDetails_SP(Nullable<int> classId, Nullable<int> sectionId, string shift, Nullable<int> examTypeId, string year)
        {
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            var sectionIdParameter = sectionId.HasValue ?
                new ObjectParameter("SectionId", sectionId) :
                new ObjectParameter("SectionId", typeof(int));
    
            var shiftParameter = shift != null ?
                new ObjectParameter("Shift", shift) :
                new ObjectParameter("Shift", typeof(string));
    
            var examTypeIdParameter = examTypeId.HasValue ?
                new ObjectParameter("ExamTypeId", examTypeId) :
                new ObjectParameter("ExamTypeId", typeof(int));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExamResultDetails_SP_Result>("GetExamResultDetails_SP", classIdParameter, sectionIdParameter, shiftParameter, examTypeIdParameter, yearParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<GetExamInfoSubjectWise_SP_Result> GetExamInfoSubjectWise_SP(Nullable<int> subjectId, Nullable<int> classId, Nullable<int> sectionId, Nullable<int> examTypeId, Nullable<int> year)
        {
            var subjectIdParameter = subjectId.HasValue ?
                new ObjectParameter("SubjectId", subjectId) :
                new ObjectParameter("SubjectId", typeof(int));
    
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            var sectionIdParameter = sectionId.HasValue ?
                new ObjectParameter("SectionId", sectionId) :
                new ObjectParameter("SectionId", typeof(int));
    
            var examTypeIdParameter = examTypeId.HasValue ?
                new ObjectParameter("ExamTypeId", examTypeId) :
                new ObjectParameter("ExamTypeId", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExamInfoSubjectWise_SP_Result>("GetExamInfoSubjectWise_SP", subjectIdParameter, classIdParameter, sectionIdParameter, examTypeIdParameter, yearParameter);
        }
    
        public virtual ObjectResult<GetExamInfoForStudent_SP_Result> GetExamInfoForStudent_SP(Nullable<int> classId, Nullable<int> sectionId, Nullable<int> examTypeId, Nullable<int> year, Nullable<int> roll)
        {
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            var sectionIdParameter = sectionId.HasValue ?
                new ObjectParameter("SectionId", sectionId) :
                new ObjectParameter("SectionId", typeof(int));
    
            var examTypeIdParameter = examTypeId.HasValue ?
                new ObjectParameter("ExamTypeId", examTypeId) :
                new ObjectParameter("ExamTypeId", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var rollParameter = roll.HasValue ?
                new ObjectParameter("Roll", roll) :
                new ObjectParameter("Roll", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExamInfoForStudent_SP_Result>("GetExamInfoForStudent_SP", classIdParameter, sectionIdParameter, examTypeIdParameter, yearParameter, rollParameter);
        }
    }
}
